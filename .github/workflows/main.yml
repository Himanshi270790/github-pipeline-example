name: 'Terraform'

on:
  workflow_dispatch:
    inputs:
      terraform_action:
        type: choice  
        description: select terraform action
        options:
        - apply
        - destroy
        required: true
  push:
    branches: [ "main" ]
  pull_request:
    branches: ["main"]

jobs:
  stage1:
    name: stage1
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_DEVOPS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_DEVOPS_SECRET_ACCESS_KEY }}
    runs-on: ubuntu-latest
      

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: 1.9.2
        tf_actions_subcommand: 'init'
        tf_actions_working_dir: 'terraform/stage1'
        tf_actions_comment: true
      

    
    - name: Terraform plan
      uses: hashicorp/terraform-github-actions@master
      with:
        
        tf_actions_version: 1.9.2
        tf_actions_subcommand: 'plan'
        tf_actions_working_dir: 'terraform/stage1'
        tf_actions_comment: true

      
    - name: Terraform apply
      if: ${{ github.event.inputs.terraform_action == 'apply' }}
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: 1.9.2
        tf_actions_subcommand: ${{ github.event.inputs.terraform_action }}
        tf_actions_working_dir: 'terraform/stage1'
        tf_actions_comment: true
        args: '-auto-approve'
    
    - name: Terraform destroy
      if: ${{ github.event.inputs.terraform_action == 'destroy' }}
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: 1.9.2
        tf_actions_subcommand: ${{ github.event.inputs.terraform_action }}
        tf_actions_working_dir: 'terraform/stage1'
        tf_actions_comment: true
        args: '-auto-approve'

  stage2:
    name: 'stage2'
    needs: [stage1]
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_DEVOPS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_DEVOPS_SECRET_ACCESS_KEY }}
    runs-on: ubuntu-latest


    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: 1.9.2
        tf_actions_subcommand: 'init'
        tf_actions_working_dir: 'terraform/stage2'
        tf_actions_comment: true
      

    
    - name: Terraform plan
      uses: hashicorp/terraform-github-actions@master
      with:
        
        tf_actions_version: 1.9.2
        tf_actions_subcommand: 'plan'
        tf_actions_working_dir: 'terraform/stage2'
        tf_actions_comment: true

      
    - name: Terraform apply
      if: ${{ github.event.inputs.terraform_action == 'apply' }}
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: 1.9.2
        tf_actions_subcommand: ${{ github.event.inputs.terraform_action }}
        tf_actions_working_dir: 'terraform/stage2'
        tf_actions_comment: true
        args: '-auto-approve'
    
    - name: Terraform destroy
      if: ${{ github.event.inputs.terraform_action == 'destroy' }}
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: 1.9.2
        tf_actions_subcommand: ${{ github.event.inputs.terraform_action }}
        tf_actions_working_dir: 'terraform/stage2'
        tf_actions_comment: true
        args: '-auto-approve'
